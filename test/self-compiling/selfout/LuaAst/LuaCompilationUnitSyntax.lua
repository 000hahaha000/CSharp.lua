-- Generated by CSharp.lua Compiler 1.0.0.0
local System = System;
local Linq = System.Linq.Enumerable;
local SystemReflection = System.Reflection;
local CSharpLuaLuaAst;
local CSharpLuaLuaAstLuaCompilationUnitSyntax;
System.usingDeclare(function (global) 
    CSharpLuaLuaAst = CSharpLua.LuaAst;
    CSharpLuaLuaAstLuaCompilationUnitSyntax = CSharpLua.LuaAst.LuaCompilationUnitSyntax;
end);
System.namespace("CSharpLua.LuaAst", function (namespace) 
    namespace.class("LuaCompilationUnitSyntax", function (namespace) 
        namespace.class("UsingDeclare", function (namespace) 
            return {
                IsFromCode = false
            };
        end);
        local getIsEmpty, AddTypeDeclaration, ImportLinq, AddImport, AddTypeDeclarationCount, AddImport1, CheckUsingDeclares, Render, 
        __init__, __ctor__;
        getIsEmpty = function (this) 
            return this.typeDeclarationCount_ == 0;
        end;
        AddTypeDeclaration = function (this, memberNode) 
            local namespaceNode = CSharpLuaLuaAst.LuaNamespaceDeclarationSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Empty);
            namespaceNode:AddMemberDeclaration(memberNode);
            this.Statements:Add1(namespaceNode);
        end;
        ImportLinq = function (this) 
            if not this.isImportLinq_ then
                AddImport(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Linq, CSharpLuaLuaAst.LuaIdentifierNameSyntax.SystemLinqEnumerable);
                this.isImportLinq_ = true;
            end
        end;
        AddImport = function (this, name, value) 
            this.HeadAreaStatements.Statements:Add1(CSharpLuaLuaAst.LuaLocalVariableDeclaratorSyntax:new(2, name, value));
        end;
        AddTypeDeclarationCount = function (this) 
            this.typeDeclarationCount_ = this.typeDeclarationCount_ + 1;
        end;
        AddImport1 = function (this, prefix, newPrefix, isFromCode) 
            if not this.usingDeclares_:Exists(function (i) return i.Prefix == prefix; end) then
                this.usingDeclares_:Add(System.create(CSharpLuaLuaAstLuaCompilationUnitSyntax.UsingDeclare(), function (default) 
                    default.Prefix = prefix;
                    default.NewPrefix = newPrefix;
                    default.IsFromCode = isFromCode;
                end));
            end
        end;
        CheckUsingDeclares = function (this) 
            local imports = Linq.ToList(Linq.Where(this.usingDeclares_, function (i) return not i.IsFromCode; end));
            if #imports > 0 then
                imports:Sort(function (x, y) return x.Prefix:CompareTo(y.Prefix); end);
                for _, import in System.each(imports) do
                    AddImport(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, import.NewPrefix), CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, import.Prefix));
                end
            end

            local usingDeclares = Linq.ToList(Linq.Where(this.usingDeclares_, function (i) return i.IsFromCode; end));
            if #usingDeclares > 0 then
                usingDeclares:Sort(function (x, y) return x.Prefix:CompareTo(y.Prefix); end);
                for _, usingDeclare in System.each(usingDeclares) do
                    AddImport(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.NewPrefix), nil);
                end

                local global = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Global;
                local functionExpression = CSharpLuaLuaAst.LuaFunctionExpressionSyntax();
                functionExpression:AddParameter1(global);
                for _, usingDeclare in System.each(usingDeclares) do
                    if usingDeclare.Prefix ~= usingDeclare.NewPrefix then
                        local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.NewPrefix), CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.Prefix));
                        functionExpression.Body.Statements:Add1(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment));
                    else
                        local right = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(global, CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.Prefix), false);
                        local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.NewPrefix), right);
                        functionExpression.Body.Statements:Add1(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment));
                    end
                end

                local invocationExpression = CSharpLuaLuaAst.LuaInvocationExpressionSyntax:new(2, CSharpLuaLuaAst.LuaIdentifierNameSyntax.UsingDeclare, functionExpression);
                this.HeadAreaStatements.Statements:Add1(CSharpLuaLuaAst.LuaExpressionStatementSyntax(invocationExpression));
            end
        end;
        Render = function (this, renderer) 
            CheckUsingDeclares(this);
            renderer:Render(this);
        end;
        __init__ = function (this) 
            this.Statements = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaStatementSyntax)();
            this.HeadAreaStatements = CSharpLuaLuaAst.LuaStatementListSyntax();
            this.usingDeclares_ = System.List(CSharpLuaLuaAstLuaCompilationUnitSyntax.UsingDeclare)();
        end;
        __ctor__ = function (this) 
            __init__(this);
            local info = SystemReflection.Assembly.GetExecutingAssembly():GetName();
            local versonStatement = CSharpLuaLuaAst.LuaShortCommentStatement((" Generated by {0} Compiler {1}"):Format(info:getName(), info:getVersion()));
            this.HeadAreaStatements.Statements:Add1(versonStatement);

            local system = CSharpLuaLuaAst.LuaIdentifierNameSyntax.System;
            AddImport(this, system, system);
            this.Statements:Add1(this.HeadAreaStatements);
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaSyntaxNode
            }, 
            isImportLinq_ = false, 
            typeDeclarationCount_ = 0, 
            getIsEmpty = getIsEmpty, 
            AddTypeDeclaration = AddTypeDeclaration, 
            ImportLinq = ImportLinq, 
            AddTypeDeclarationCount = AddTypeDeclarationCount, 
            AddImport1 = AddImport1, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
end);

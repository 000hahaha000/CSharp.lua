-- Generated by CSharp.lua Compiler 1.0.0.0
local System = System;
local CSharpLuaLuaAst;
local CSharpLuaLuaAstLuaExpressionSyntax;
System.usingDeclare(function (global) 
    CSharpLuaLuaAst = CSharpLua.LuaAst;
    CSharpLuaLuaAstLuaExpressionSyntax = CSharpLua.LuaAst.LuaExpressionSyntax;
end);
System.namespace("CSharpLua.LuaAst", function (namespace) 
    namespace.class("LuaExpressionSyntax", function (namespace) 
        namespace.class("EmptyLuaExpressionSyntax", function (namespace) 
            local Render;
            Render = function (this, renderer) 
            end;
            return {
                __inherits__ = {
                    CSharpLuaLuaAst.LuaExpressionSyntax
                }, 
                Render = Render
            };
        end);
        local EmptyExpression, __staticCtor__;
        __staticCtor__ = function (this) 
            EmptyExpression = CSharpLuaLuaAstLuaExpressionSyntax.EmptyLuaExpressionSyntax();
            this.EmptyExpression = EmptyExpression;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaSyntaxNode
            }, 
            __staticCtor__ = __staticCtor__
        };
    end);
    namespace.class("LuaAssignmentExpressionSyntax", function (namespace) 
        local getOperatorToken, Render, __ctor__;
        getOperatorToken = function (this) 
            return "=" --[[Tokens.Equals]];
        end;
        Render = function (this, renderer) 
            renderer:Render22(this);
        end;
        __ctor__ = function (this, left, right) 
            if left == nil then
                System.throw(System.ArgumentNullException("left"));
            end
            if right == nil then
                System.throw(System.ArgumentNullException("right"));
            end
            this.Left = left;
            this.Right = right;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            getOperatorToken = getOperatorToken, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaMultipleAssignmentExpressionSyntax", function (namespace) 
        local getOperatorToken, Render, __ctor__;
        getOperatorToken = function (this) 
            return "=" --[[Tokens.Equals]];
        end;
        Render = function (this, renderer) 
            renderer:Render23(this);
        end;
        __ctor__ = function (this) 
            this.Lefts = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaExpressionSyntax)();
            this.Rights = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaExpressionSyntax)();
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            getOperatorToken = getOperatorToken, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaLineMultipleExpressionSyntax", function (namespace) 
        local Render, __ctor__;
        Render = function (this, renderer) 
            renderer:Render24(this);
        end;
        __ctor__ = function (this) 
            this.Assignments = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaExpressionSyntax)();
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaBinaryExpressionSyntax", function (namespace) 
        local Render, __ctor__;
        Render = function (this, renderer) 
            renderer:Render39(this);
        end;
        __ctor__ = function (this, left, operatorToken, right) 
            this.Left = left;
            this.OperatorToken = operatorToken;
            this.Right = right;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaPrefixUnaryExpressionSyntax", function (namespace) 
        local Render, __ctor__;
        Render = function (this, renderer) 
            renderer:Render43(this);
        end;
        __ctor__ = function (this, operand, operatorToken) 
            if operand == nil then
                System.throw(System.ArgumentNullException("operand"));
            end
            this.Operand = operand;
            this.OperatorToken = operatorToken;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaParenthesizedExpressionSyntax", function (namespace) 
        local getOpenParenToken, getCloseParenToken, Render, __ctor__;
        getOpenParenToken = function (this) 
            return "(" --[[Tokens.OpenParentheses]];
        end;
        getCloseParenToken = function (this) 
            return ")" --[[Tokens.CloseParentheses]];
        end;
        Render = function (this, renderer) 
            renderer:Render54(this);
        end;
        __ctor__ = function (this, expression) 
            if expression == nil then
                System.throw(System.ArgumentNullException("expression"));
            end
            this.Expression = expression;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            getOpenParenToken = getOpenParenToken, 
            getCloseParenToken = getCloseParenToken, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaCodeTemplateExpressionSyntax", function (namespace) 
        local Render, __ctor__;
        Render = function (this, renderer) 
            renderer:Render58(this);
        end;
        __ctor__ = function (this) 
            this.Expressions = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaExpressionSyntax)();
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaArrayRankSpecifierSyntax", function (namespace) 
        local __init__, __ctor__;
        __init__ = function (this) 
            this.Sizes = System.List(CSharpLuaLuaAst.LuaExpressionSyntax)();
        end;
        __ctor__ = function (this, rank) 
            __init__(this);
            this.Rank = rank;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaSyntaxNode
            }, 
            Rank = 0, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaArrayTypeAdapterExpressionSyntax", function (namespace) 
        local getBaseType, getIsSimapleArray, Render, __ctor__;
        getBaseType = function (this) 
            return this.InvocationExpression.ArgumentList.Arguments:get(0).Expression;
        end;
        getIsSimapleArray = function (this) 
            return this.RankSpecifier.Rank == 1;
        end;
        Render = function (this, renderer) 
            this.InvocationExpression:Render(renderer);
        end;
        __ctor__ = function (this, invocationExpression, rankSpecifier) 
            if invocationExpression == nil then
                System.throw(System.ArgumentNullException("invocationExpression"));
            end
            if rankSpecifier == nil then
                System.throw(System.ArgumentNullException("rankSpecifier"));
            end
            this.InvocationExpression = invocationExpression;
            this.RankSpecifier = rankSpecifier;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            getBaseType = getBaseType, 
            getIsSimapleArray = getIsSimapleArray, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaInternalMethodExpressionSyntax", function (namespace) 
        local Render, __ctor__;
        Render = function (this, renderer) 
            this.Expression:Render(renderer);
        end;
        __ctor__ = function (this, expression) 
            if expression == nil then
                System.throw(System.ArgumentNullException("expression"));
            end
            this.Expression = expression;
        end;
        return {
            __inherits__ = {
                CSharpLuaLuaAst.LuaExpressionSyntax
            }, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
end);

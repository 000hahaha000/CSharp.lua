-- Generated by CSharp.lua Compiler 1.0.0.0
local System = System;
System.namespace("CSharpLua", function (namespace) 
    namespace.class("LuaSyntaxGenerator", function (namespace) 
        namespace.class("SettingInfo", function (namespace) 
            local getIndent, setIndent, __ctor__;
            __ctor__ = function (this) 
                setIndent(this, 4);
                this.HasSemicolon = true;
                this.IsNewest = true;
            end;
            getIndent = function (this) 
                return this.indent_;
            end;
            setIndent = function (this, value) 
                if this.indent_ ~= value then
                    this.indent_ = value;
                    this.IndentString = System.String(32 --[[' ']], this.indent_);
                end
            end;
            return {
                HasSemicolon = False, 
                indent_ = 0, 
                IsNewest = False, 
                getIndent = getIndent, 
                setIndent = setIndent, 
                __ctor__ = __ctor__
            };
        end);
        local Create, Generate, IsEnumExport, AddExportEnum, __init__, __ctor__;
        __init__ = function (this) 
            this.exportEnums_ = System.HashSet(System.String)();
        end;
        __ctor__ = function (this, metas) 
            __init__(this);
            this.XmlMetaProvider = CSharpLua.XmlMetaProvider(metas);
            this.Setting = CSharpLua.LuaSyntaxGenerator.SettingInfo();
        end;
        Create = function (this, compilation) 
            local luaCompilationUnits = System.List(CSharpLua.LuaAst.LuaCompilationUnitSyntax)();
            for _, syntaxTree in System.each(compilation:getSyntaxTrees()) do
                local semanticModel = compilation:GetSemanticModel(syntaxTree);
                local compilationUnitSyntax = System.cast(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax, syntaxTree:GetRoot());
                local transfor = CSharpLua.LuaSyntaxNodeTransfor:new(1, this, semanticModel);
                local luaCompilationUnit = System.cast(CSharpLua.LuaAst.LuaCompilationUnitSyntax, compilationUnitSyntax:Accept(transfor, CSharpLua.LuaAst.LuaSyntaxNode));
                if not luaCompilationUnit:getIsEmpty() then
                    luaCompilationUnits:Add(luaCompilationUnit);
                end
            end
            return luaCompilationUnits;
        end;
        Generate = function (this, compilation, writerFunctor) 
            for _, luaCompilationUnit in System.each(Create(this, compilation)) do
                System.using(function (writer) 
                    local rener = CSharpLua.LuaRenderer(this, writer);
                    luaCompilationUnit:Render(rener);
                end, writerFunctor(this, luaCompilationUnit));
            end
        end;
        IsEnumExport = function (this, enumName) 
            return this.exportEnums_:Contains(enumName);
        end;
        AddExportEnum = function (this, enumName) 
            this.exportEnums_:Add(enumName);
        end;
        return {
            Generate = Generate, 
            IsEnumExport = IsEnumExport, 
            AddExportEnum = AddExportEnum, 
            __ctor__ = __ctor__
        };
    end);
end);

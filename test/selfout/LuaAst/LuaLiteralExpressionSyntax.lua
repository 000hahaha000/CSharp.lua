-- Generated by CSharp.lua Compiler 1.0.0.0
local System = System;
System.namespace("CSharpLua.LuaAst", function (namespace) 
    namespace.class("LuaLiteralExpressionSyntax", function (namespace) 
        getText, setText = System.property("Text");
        local getText, setText;
        return {
            __inherits__ = {
                CSharpLua.LuaAst.LuaExpressionSyntax
            }, 
            getText = getText, 
            setText = setText
        };
    end);
    namespace.class("LuaIdentifierLiteralExpressionSyntax", function (namespace) 
        local getText, Render, __ctor1__, __ctor2__;
        __ctor1__ = function (this, text) 
            __ctor2__(this, CSharpLua.LuaAst.LuaIdentifierNameSyntax:new(1, text));
        end;
        __ctor2__ = function (this, identifier) 
            this.Identifier = identifier;
        end;
        getText = function (this) 
            return this.Identifier.ValueText;
        end;
        Render = function (this, renderer) 
            renderer:Render(this);
        end;
        return {
            __inherits__ = {
                CSharpLua.LuaAst.LuaLiteralExpressionSyntax
            }, 
            getText = getText, 
            Render = Render, 
            __ctor__ = {
                __ctor1__, 
                __ctor2__
            }
        };
    end);
    namespace.class("LuaStringLiteralExpressionSyntax", function (namespace) 
        local getOpenParenToken, getCloseParenToken, getText, Render, Empty, __staticCtor__, __ctor__;
        __staticCtor__ = function (this) 
            Empty = CSharpLua.LuaAst.LuaStringLiteralExpressionSyntax:new(1, CSharpLua.LuaAst.LuaIdentifierNameSyntax.Empty);
            this.Empty = Empty;
        end;
        __ctor__ = function (this, identifier) 
            this.Identifier = identifier;
        end;
        getOpenParenToken = function (this) 
            return "\"" --[[Tokens.Quote]];
        end;
        getCloseParenToken = function (this) 
            return "\"" --[[Tokens.Quote]];
        end;
        getText = function (this) 
            return this.Identifier.ValueText;
        end;
        Render = function (this, renderer) 
            renderer:Render(this);
        end;
        return {
            __inherits__ = {
                CSharpLua.LuaAst.LuaLiteralExpressionSyntax
            }, 
            getOpenParenToken = getOpenParenToken, 
            getCloseParenToken = getCloseParenToken, 
            getText = getText, 
            Render = Render, 
            __staticCtor__ = __staticCtor__, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaVerbatimStringLiteralExpressionSyntax", function (namespace) 
        getText, setText = System.property("Text");
        local getText, setText, getOpenBracket, getCloseBracket, Render, __ctor__;
        __ctor__ = function (this, text, equalsCount) 
            setText(this, text);
            this.EqualsCount = equalsCount;
        end;
        getOpenBracket = function (this) 
            return "[" --[[Tokens.OpenBracket]];
        end;
        getCloseBracket = function (this) 
            return "]" --[[Tokens.CloseBracket]];
        end;
        Render = function (this, renderer) 
            renderer:Render(this);
        end;
        return {
            __inherits__ = {
                CSharpLua.LuaAst.LuaLiteralExpressionSyntax
            }, 
            getText = getText, 
            setText = setText, 
            EqualsCount = 0, 
            getOpenBracket = getOpenBracket, 
            getCloseBracket = getCloseBracket, 
            Render = Render, 
            __ctor__ = __ctor__
        };
    end);
    namespace.class("LuaConstLiteralExpression", function (namespace) 
        local getOpenComment, getCloseComment, getText, Render, __ctor1__, __ctor2__;
        __ctor1__ = function (this, value, identifierToken) 
            __ctor2__(this, CSharpLua.LuaAst.LuaIdentifierLiteralExpressionSyntax:new(1, value), identifierToken);
        end;
        __ctor2__ = function (this, value, identifierToken) 
            this.Value = value;
            this.IdentifierToken = identifierToken;
        end;
        getOpenComment = function (this) 
            return "--[[" --[[Tokens.OpenLongComment]];
        end;
        getCloseComment = function (this) 
            return "]]" --[[Tokens.CloseDoubleBrace]];
        end;
        getText = function (this) 
            return this.Value:getText();
        end;
        Render = function (this, renderer) 
            renderer:Render(this);
        end;
        return {
            __inherits__ = {
                CSharpLua.LuaAst.LuaLiteralExpressionSyntax
            }, 
            getOpenComment = getOpenComment, 
            getCloseComment = getCloseComment, 
            getText = getText, 
            Render = Render, 
            __ctor__ = {
                __ctor1__, 
                __ctor2__
            }
        };
    end);
    namespace.class("LuaCharacterLiteralExpression", function (namespace) 
        local GetIdentifierToken, __ctor__;
        __ctor__ = function (this, character) 
            CSharpLua.LuaAst.LuaConstLiteralExpression.__ctor__[1](this, (System.cast(System.Int, character)):ToString(), GetIdentifierToken(this, character));
        end;
        GetIdentifierToken = function (character) 
            return Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(character):getText();
        end;
        return {
            __inherits__ = {
                CSharpLua.LuaAst.LuaConstLiteralExpression
            }, 
            __ctor__ = __ctor__
        };
    end);
end);

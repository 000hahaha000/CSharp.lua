/*
Copyright 2016 YANG Huan (sy.yanghuan@gmail.com).
Copyright 2016 Redmoon Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CSharpLua.LuaAst {
    public sealed class LuaCompilationUnitSyntax : LuaSyntaxNode {
        public string FilePath { get; set; }
        public readonly LuaSyntaxList<LuaStatementSyntax> Statements = new LuaSyntaxList<LuaStatementSyntax>();
        private LuaStatementListSyntax HeadAreaStatements = new LuaStatementListSyntax();
        private bool isImportLinq_;
        private int typeDeclarationCount_;

        public LuaCompilationUnitSyntax() {
            var info = Assembly.GetExecutingAssembly().GetName();
            LuaShortCommentStatement versonStatement = new LuaShortCommentStatement($" Generated by {info.Name} Compiler {info.Version}");
            HeadAreaStatements.Statements.Add(versonStatement);

            var system = LuaIdentifierNameSyntax.System;
            AddImport(system, system);
            Statements.Add(HeadAreaStatements);
        }

        public bool IsEmpty {
            get {
                return typeDeclarationCount_ == 0;
            }
        }

        public void AddTypeDeclaration(LuaTypeDeclarationSyntax memberNode) {
            LuaNamespaceDeclarationSyntax namespaceNode = new LuaNamespaceDeclarationSyntax(LuaIdentifierNameSyntax.Empty);
            namespaceNode.AddMemberDeclaration(memberNode);
            Statements.Add(namespaceNode);
        }

        public void ImportLinq() {
            if(!isImportLinq_) {
                AddImport(LuaIdentifierNameSyntax.Linq, LuaIdentifierNameSyntax.SystemLinqEnumerable);
                isImportLinq_ = true;
            }
        }

        public void AddImport(LuaIdentifierNameSyntax name, LuaExpressionSyntax value) {
            LuaVariableDeclaratorSyntax variableDeclarator = new LuaVariableDeclaratorSyntax(name);
            variableDeclarator.Initializer = new LuaEqualsValueClauseSyntax(value);
            HeadAreaStatements.Statements.Add(new LuaLocalVariableDeclaratorSyntax(variableDeclarator));
        }

        internal override void Render(LuaRenderer renderer) {
            renderer.Render(this);
        }

        internal void AddTypeDeclarationCount() {
            ++typeDeclarationCount_;
        }
    }
}